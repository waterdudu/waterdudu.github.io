<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>waterdudu&#39;s blog</title>
    <link>http://waterdudu.github.io/</link>
    <description>Recent content on waterdudu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Feb 2016 17:22:30 +0800</lastBuildDate>
    <atom:link href="http://waterdudu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hello</title>
      <link>http://waterdudu.github.io/post/hello/</link>
      <pubDate>Sun, 14 Feb 2016 17:22:30 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/hello/</guid>
      <description></description>
    </item>
    
    <item>
      <title>test</title>
      <link>http://waterdudu.github.io/post/test/</link>
      <pubDate>Sun, 14 Feb 2016 17:16:50 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://waterdudu.github.io/about/</link>
      <pubDate>Sun, 14 Feb 2016 16:14:43 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/about/</guid>
      <description>&lt;p&gt;Something
x&lt;/p&gt;

&lt;p&gt;hello&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go</title>
      <link>http://waterdudu.github.io/post/go/</link>
      <pubDate>Sun, 14 Feb 2016 15:41:49 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/go/</guid>
      <description></description>
    </item>
    
    <item>
      <title>react</title>
      <link>http://waterdudu.github.io/post/react/</link>
      <pubDate>Thu, 21 Jan 2016 20:56:01 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/react/</guid>
      <description>

&lt;p&gt;react do two things when model is updated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run diffing algorithm, which identifies what has changed&lt;/li&gt;
&lt;li&gt;reconciliation, update the DOM with the result of diff&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;webpack:67f377003d8e128a03b229dc0a3f87a9&#34;&gt;Webpack&lt;/h5&gt;

&lt;p&gt;Gulp and Grunt handle files, while Webpack handles projects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just hit ENTER&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
npm install --save react@0.14.3
npm install --save react-dom@0.14.3
npm install --save-dev babel-core@6.3.13
npm install --save-dev babel-loader@6.2.0
npm install --save-dev babel-preset-es2015@6.3.13
npm install --save-dev babel-preset-react@6.3.13

npm install webpack -g


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next you need to create index.html file.&lt;/p&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;enc&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;React Github Notetaker&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next create a webpack config file.&lt;/p&gt;

&lt;p&gt;webpack.config.js&lt;/p&gt;

&lt;p&gt;compiling &lt;code&gt;entry&lt;/code&gt; to &lt;code&gt;output&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
module.exports = {
    entry: &#39;./app/components/Main.js&#39;,
    output: {
        filename: &#39;public/bundle.js&#39;
    },
    module: {
        loaders: [
        {
            test: /\.jsx?$/,
            exclude: /(node_modules|bower_components)/,
            loader: &#39;babel&#39;,
            query: {
                presets: [&#39;react&#39;, &#39;es2015&#39;]
            }
        }
        ]
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next create Main.js&lt;/p&gt;

&lt;p&gt;Main.js&lt;/p&gt;

&lt;p&gt;React.createClass create react component for us.
Every react component needs a render method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Main.js

var React = require(&#39;react&#39;);
var ReactDOM = require(&#39;react-dom&#39;);

var Main = React.createClass({
    render: function() {
        return (
            &amp;lt;div&amp;gt;
                Hello world
            &amp;lt;/div&amp;gt;
            )
    }
})

ReactDOM.render(
      &amp;lt;Main /&amp;gt;,
      document.getElementById(&#39;app&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;call webpack&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;webpack -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;open index.html and see.&lt;/p&gt;

&lt;p&gt;Each component can has its state&lt;/p&gt;

&lt;p&gt;TODO:
getInitialState ?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Main = React.createClass({
    getInitialState() {
        return {
            friends: [&#39;John&#39;, &#39;Tom&#39;]
        }
    },
    render: function() {
        return (
            &amp;lt;div&amp;gt;
                Hello world
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                My Friends: {this.state.friends}
            &amp;lt;/div&amp;gt;
            )
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;render can be written like this:&lt;/p&gt;

&lt;p&gt;render : function() {} =&amp;gt; render() {}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    render() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;p&amp;gt;Hello world&amp;lt;/p&amp;gt;
                My Friends: {this.state.friends}
                &amp;lt;br /&amp;gt;
            &amp;lt;/div&amp;gt;
            )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now suppose you have other component named List, you want to import it in Main component.
You could do like this.&lt;/p&gt;

&lt;p&gt;Create a file called List.js in app/component.&lt;/p&gt;

&lt;p&gt;List.js&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// List.js

var React = require(&#39;react&#39;);
// var ReactDOM = require(&#39;react-dom&#39;);

var List = React.createClass({
    render() {
        return (
                &amp;lt;div&amp;gt; My List data &amp;lt;/div&amp;gt;
            )
    }
})

// this works
module.exports = List
// exports default List
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;require it in Main.js&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// main.js

var React = require(&#39;react&#39;);
var ReactDOM = require(&#39;react-dom&#39;);
var List = require(&#39;./List&#39;)


var Main = React.createClass({
    getInitialState() {
        return {
            friends: [&#39;John&#39;, &#39;Tom&#39;]
        }
    },
    render() {
        return (
            &amp;lt;div&amp;gt;
                &amp;lt;p&amp;gt;Hello world&amp;lt;/p&amp;gt;
                My Friends: {this.state.friends}
                &amp;lt;List /&amp;gt;
                &amp;lt;br /&amp;gt;
            &amp;lt;/div&amp;gt;
            )
    }
})

ReactDOM.render(
      &amp;lt;Main /&amp;gt;,
      document.getElementById(&#39;app&#39;)
);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pass friends to List components&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// List.js

var React = require(&#39;react&#39;);

var List = React.createClass({
    render() {
        const friendList = this.props.friends.map((item, index) =&amp;gt; {
            return &amp;lt;li key={index}&amp;gt; {item} &amp;lt;/li&amp;gt;
        })
        return (
            &amp;lt;ul&amp;gt;
                {friendList}
            &amp;lt;/ul&amp;gt;
        )
    }
})

module.exports = List
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1:67f377003d8e128a03b229dc0a3f87a9&#34;&gt;?&lt;/h3&gt;

&lt;p&gt;what is props? why can we do like &lt;code&gt;this.props.friends.map ...&lt;/code&gt;
what is state?&lt;/p&gt;

&lt;h3 id=&#34;next:67f377003d8e128a03b229dc0a3f87a9&#34;&gt;next&lt;/h3&gt;

&lt;p&gt;React Redux&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go concurrency patterns</title>
      <link>http://waterdudu.github.io/post/go-concurrency-patterns/</link>
      <pubDate>Wed, 20 Jan 2016 14:51:48 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/go-concurrency-patterns/</guid>
      <description>

&lt;h3 id=&#34;fanin:9357571808d2807c9bcef92c59571acd&#34;&gt;fanIn&lt;/h3&gt;

&lt;p&gt;pattern&lt;/p&gt;

&lt;p&gt;c &amp;lt;- &amp;lt;-input1 含义，把 input1 的信息拿出丢给 c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
A -&amp;gt;
       C -&amp;gt;
B -&amp;gt; 
*/

func fanIn(input1, input2 &amp;lt;-chan string) &amp;lt;-chan string {
    c := make(chan string)

    go func() { for { c &amp;lt;- &amp;lt;-input1 } }()
    go func() { for { c &amp;lt;- &amp;lt;-input2 } }()
    return c
}

func main() {
    c := fanIn(boring(&amp;quot;Joe&amp;quot;), boring(&amp;quot;Ann&amp;quot;))
    for i := 0; i &amp;lt; 10; i++ {
        fmt.Println(&amp;lt;-c)
    }
    fmt.Println(&amp;quot;You&#39;re both boring. I&#39;m leaving&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;channel-of-channel:9357571808d2807c9bcef92c59571acd&#34;&gt;channel of channel&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math/rand&amp;quot;
    &amp;quot;time&amp;quot;
)

type Message struct {
    str string
    wait chan bool
}

func main() {
    c := fanIn(boring(&amp;quot;Joe&amp;quot;), boring(&amp;quot;Ann&amp;quot;)) // HL

    // main 函数等待五次
    // 先从 fanIn 返回的 channel 里读 message（这是一个 Message 的 channel）
    // 读到消息（boring 函数里的 c &amp;lt;- Message 这句），则打印输出
    // 接下来再从 fanIn 的 channel 里读数据 ，读出来再打印输出

    // 接下来再设置 msg1, msg2 的 wait channel（共享的）为true
    // 告诉 boring 运行的 goroutine 可以再生产啦！
    // 于是那两个 goroutine 就又开始塞数据了（c &amp;lt;- Message{}）

    // 注意：每次都是 msg1.wait &amp;lt;- true, msg2.wait &amp;lt;- true 
    // 告诉 goroutine，可以再给我数据了
    for i := 0; i &amp;lt; 5; i++ {
        msg1 := &amp;lt;-c; fmt.Println(msg1.str)
        msg2 := &amp;lt;-c; fmt.Println(msg2.str)
        msg1.wait &amp;lt;- true
        msg2.wait &amp;lt;- true
    }

    fmt.Println(&amp;quot;You&#39;re all boring; I&#39;m leaving.&amp;quot;)
}

func boring(msg string) &amp;lt;-chan Message { // Returns receive-only channel of strings.

    // boring 的 goroutine 循环写数据，写完数据睡一会儿，起来看看是不是需要再 wait
    // 如果不需要再 wait，那么就退出
    // 写完再继续写，直到 main 退出

    c := make(chan Message)

    // 多个 Message 共享这个 waitForIt channel
    // 当 main 函数连续调用 msg.wait &amp;lt;- true 时
    // 下面的 func 函数被调用
    //（&amp;lt;-waitForIt 是 block 的，如果 main 函数不丢信息到 wait channel，func不会调用）
    waitForIt := make(chan bool) // Shared between all messages.

    go func() { // We launch the goroutine from inside the function.
        for i := 0; ; i++ {

            c &amp;lt;- Message{ fmt.Sprintf(&amp;quot;%s: %d&amp;quot;, msg, i), waitForIt }
            time.Sleep(time.Duration(rand.Intn(2e3)) * time.Millisecond)
            // 如果 main 函数不通过 msg.wait &amp;lt;- true 写数据，func 会 block
            &amp;lt;-waitForIt

        }
    }()

    return c
}


// 参考 fakeIn 的 pattern
// 把来参数列表的多个 channel 合并到一个 channel
func fanIn(inputs ... &amp;lt;-chan Message) &amp;lt;-chan Message {
    c := make(chan Message)
    for i := range inputs {
        input := inputs[i] // New instance of &#39;input&#39; for each loop.
        go func() { for { c &amp;lt;- &amp;lt;-input } }()
    }
    return c
}


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;select:9357571808d2807c9bcef92c59571acd&#34;&gt;select&lt;/h3&gt;

&lt;p&gt;如果多于 2 个 case 满足条件，随机选取一个&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select {
    case v1 := &amp;lt;-c1:
        fmt.Println(v1)
    case v2 := &amp;lt;-c2:
        fmt.Println(v2)
    case c3 &amp;lt;- 23:
        fmt.Println(23)
    default:
        fmt.Println(&amp;quot;default&amp;quot;)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重写 fadeIn&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
func fanIn(input1, input2 &amp;lt;-chan string) &amp;lt;-chan string {
    c := make(chan string)

    go func() {
        for {
            select {
                case s := &amp;lt;-input1: c &amp;lt;- s
                case s := &amp;lt;-input2: c &amp;lt;- s

            }
        } 
    }()

    return c
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;select timeout
等你或不等&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    func main() {
    c := boring(&amp;quot;J&amp;quot;)

    for {
        select {
            case s := &amp;lt;-c:
                fmt.Println(s)
            case &amp;lt;-time.After( time.Second ):
                fmt.Println(&amp;quot;too slow&amp;quot;)
                return

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;timeout 在外部声明，可以timeout 整个 conversation&lt;/p&gt;

&lt;p&gt;单个 channel 超时不超过 1s&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    c := boring(&amp;quot;Joe&amp;quot;)
    for {
        select {
        case s := &amp;lt;-c:
            fmt.Println(s)
        case &amp;lt;-time.After(1 * time.Second): // HL
            fmt.Println(&amp;quot;You&#39;re too slow.&amp;quot;)
            return
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多个 channel 超时不超过 5s&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    c := boring(&amp;quot;Joe&amp;quot;)
    timeout := time.After(5 * time.Second) // HL
    for {
        select {
        case s := &amp;lt;-c:
            fmt.Println(s)
        case &amp;lt;-timeout: // HL
            fmt.Println(&amp;quot;You talk too much.&amp;quot;)
            return
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;quit-channel:9357571808d2807c9bcef92c59571acd&#34;&gt;quit channel&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;quit := make(chan string)
c := boring(&amp;quot;J&amp;quot;, quit)

for i := rand.Intn(10); i &amp;gt;= 0; i-- {
    fmt.Println(i)
}
quit &amp;lt;- &amp;quot;Bye!&amp;quot;
fmt.Println(&amp;quot;J says: %q\n&amp;quot;, &amp;lt;-quit)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;select {
    case c &amp;lt;- fmt.Sprintf(&amp;quot;%s: %d&amp;quot;, msg, i)
        // do nothing
    case &amp;lt;-quit:
        cleanup()
        quit &amp;lt;- &amp;quot;See you!&amp;quot;
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;replica-search:9357571808d2807c9bcef92c59571acd&#34;&gt;replica search&lt;/h3&gt;

&lt;p&gt;把同一 query 让多个 server 做检索，返回第一个返回的作为 search result&lt;/p&gt;

&lt;p&gt;use : replica + timeout pattern&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math/rand&amp;quot;
    &amp;quot;time&amp;quot;
)

type Result string
type Search func(query string) Result


// 把同一 query 让多个 server 做检索，返回第一个返回的作为 search result
func First(query string, replicas ...Search) Result {
    c := make(chan Result)
    searchReplica := func(i int) { c &amp;lt;- replicas[i](query) }
    for i := range replicas {
        go searchReplica(i)
    }
    return &amp;lt;-c
}

func main() {
    rand.Seed(time.Now().UnixNano())
    start := time.Now()
    result := First(&amp;quot;golang&amp;quot;,
        fakeSearch(&amp;quot;replica 1&amp;quot;),
        fakeSearch(&amp;quot;replica 2&amp;quot;))
    elapsed := time.Since(start)
    fmt.Println(result)
    fmt.Println(elapsed)
}

func fakeSearch(kind string) Search {
        return func(query string) Result {
              time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
              return Result(fmt.Sprintf(&amp;quot;%s result for %q\n&amp;quot;, kind, query))
        }
}


&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>go tips</title>
      <link>http://waterdudu.github.io/post/go-tips/</link>
      <pubDate>Mon, 18 Jan 2016 13:41:35 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/go-tips/</guid>
      <description>

&lt;h3 id=&#34;资源:a2653e2feb85ac0f67b04a4d51202bc4&#34;&gt;资源&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/&#34;&gt;github.com/golang/go/wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/faq&#34;&gt;go faq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.golangbootcamp.com/book/&#34;&gt;golang bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://go-database-sql.org/&#34;&gt;go database-sql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;effective go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;访问-map-的-key-value:a2653e2feb85ac0f67b04a4d51202bc4&#34;&gt;访问 map 的 key, value&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;x := map[string]string{
    &amp;quot;name&amp;quot;: &amp;quot;dudu&amp;quot;,
    &amp;quot;love&amp;quot;: &amp;quot;many&amp;quot;,
}

if _, ok := x[&amp;quot;love&amp;quot;]; !ok {
    fmt.Println(&amp;quot;a person with no love&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;修改-string-时-转换成-slice:a2653e2feb85ac0f67b04a4d51202bc4&#34;&gt;修改 string 时，转换成 slice&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;x := &amp;quot;strings are read-only&amp;quot;
xbytes := []byte(x)
xbytes[0] = &#39;S&#39;

fmt.Println(string(xbytes))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;以下调用合法:a2653e2feb85ac0f67b04a4d51202bc4&#34;&gt;以下调用合法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;调用 pointer receiver method，只要调用者是 pointer type，或者它能被取地址（&amp;amp;）&lt;/li&gt;
&lt;li&gt;调用 value recieiver method，只要调用者是 value type，或者它的 value 可以被取值（*）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rule about pointers vs. values for receivers is that value methods can be invoked on pointers and values, but pointer methods can only be invoked on pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type List [] int

func (l List) Len() int { return len(l) }
func (l *List) Append(val int) { *l = append(*l, val) }

// call
var list List
list.Append(l)
fmt.Printf(&amp;quot;%v (len: %d) \n&amp;quot;, list, list.Len())

pList := new(List)
pList.Append(2)
fmt.Printf(&amp;quot;%v (len: %d) \n&amp;quot;, pList, pList.Len())

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;for-range-string:a2653e2feb85ac0f67b04a4d51202bc4&#34;&gt;for range string&lt;/h3&gt;

&lt;p&gt;for range 默认会把 string 当作 utf-8 字符，如果不能解析，则返回 0xfffd。
需要把它转换成 byte slice 让结果正确。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data := &amp;quot;A\xfe\x02\xff\x04&amp;quot;
for _,v := range data {
    fmt.Printf(&amp;quot;%#x &amp;quot;,v)
}
//prints: 0x41 0xfffd 0x2 0xfffd 0x4 (not ok)

fmt.Println()
for _,v := range []byte(data) {
    fmt.Printf(&amp;quot;%#x &amp;quot;,v)
}
//prints: 0x41 0xfe 0x2 0xff 0x4 (good)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;for-range-map-随机:a2653e2feb85ac0f67b04a4d51202bc4&#34;&gt;for range map 随机&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;m := map[string]int{&amp;quot;one&amp;quot;: 1, &amp;quot;two&amp;quot;: 2, &amp;quot;three&amp;quot;: 3, &amp;quot;four&amp;quot;: 4}
for k, v := range m {
    fmt.Println(k, v)
}

// first time run

// [ run | done: 9.628665ms ]
//  one 1
//  two 2
//  three 3
//  four 4


// second time run

// [ run | done: 8.847101ms ]
//  three 3
//  four 4
//  one 1
//  two 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;switch:a2653e2feb85ac0f67b04a4d51202bc4&#34;&gt;switch&lt;/h3&gt;

&lt;p&gt;switch 默认是 fallthrough 的，可以在 case 语句里写成 list，或者使用 fallthrough 语句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;isSpace := func(ch byte) bool {
    switch(ch) {
    case &#39; &#39;, &#39;\t&#39;:
        return true
    }
    return false
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>photomosaic</title>
      <link>http://waterdudu.github.io/post/photomosaic/</link>
      <pubDate>Sat, 14 Nov 2015 23:49:14 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/photomosaic/</guid>
      <description>

&lt;h1 id=&#34;just-another-photo-mosaic-app:4ecaecb9a929be0046d2b8fa3b2964e3&#34;&gt;Just another photo mosaic app&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Hallstatt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;post-avatar&#34; alt=&#34;&#34; src=&#34;http://waterdudu.github.io/img/village.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vatican&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;post-avatar&#34; alt=&#34;&#34; src=&#34;http://waterdudu.github.io/img/castle.jpg&#34;&gt;
&lt;strong&gt;Sanlitun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;post-avatar&#34; alt=&#34;&#34; src=&#34;http://waterdudu.github.io/img/chinese_art.jpg&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>swiftwordpolicy</title>
      <link>http://waterdudu.github.io/post/swiftwordpolicy/</link>
      <pubDate>Sat, 07 Nov 2015 10:09:13 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/swiftwordpolicy/</guid>
      <description>&lt;p&gt;Privacy Policy (effective date October 4, 2015)
Privacy Policy of SwiftWord&lt;/p&gt;

&lt;p&gt;About This Policy&lt;/p&gt;

&lt;p&gt;This privacy policy describes the privacy practices of the website and apps published by SwiftWord Developer, which includes a link to this policy.&lt;/p&gt;

&lt;p&gt;Personal Information Collection: Apps published by SwiftWord Developer will not collect any personal information.&lt;/p&gt;

&lt;p&gt;Personal Information Sharing: Apps published by SwiftWord Developer may not share personal information about consumers with third parties for their own marketing purposes unless the consumer agreed to that sharing.&lt;/p&gt;

&lt;p&gt;Children’s Online Privacy Protection Act
Our mobile applications comply with the Children’s Online Privacy Protection Act (“COPPA”). We don’t knowingly collect personal information from children under the age of 13 years old. If a user is identified as under 13 years old, we will not collect or use any information of this user and we will delete any information already received in a secure manner.&lt;/p&gt;

&lt;p&gt;Other Privacy Related Issues: Apps published by SwiftWord Developer may contain links to other sites or applications which are owned or run by 3rd parties. SwiftWord Developer will not be responsible for those linked sites or application.&lt;/p&gt;

&lt;p&gt;Changes on Privacy Policy&lt;/p&gt;

&lt;p&gt;If we change or update the privacy policy to allow SwiftWord Developer to use or share your previously collected personal information in a different way, we will update the Policy on this web page. We encourage you to periodically visit this page for the latest privacy practices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>first</title>
      <link>http://waterdudu.github.io/post/first/</link>
      <pubDate>Fri, 06 Nov 2015 22:45:04 +0800</pubDate>
      
      <guid>http://waterdudu.github.io/post/first/</guid>
      <description>&lt;p&gt;hey first
hey world&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>